#!/bin/bash

#shellcheck source=/dev/null
source "./shUnit"

set_up() {
    echo "#!/bin/bash
test_1() {
    :
}

test_2() {
    :
}

test_3() {
    :
}" >./test_test
    source ./test_test
    FILENAME='./test_test'
    SH_UNIT_FILENAME='./shUnit'
}

tear_down() {
    rm ./test_test
    unset FILENAME
    unset SH_UNIT_FILENAME
}

test_run() {
    local test_name=test_1
    local was_run_var="${test_name}_WAS_RUN"
    (
        set_up() {
            :
        }
        tear_down() {
            :
        }
        run "$test_name" >/dev/null
        if ! "${!was_run_var}"; then
            return 1
        fi
        return 0
    )
}

test_set_up_test() {
    local test_name=test_1
    local set_up_var="${test_name}_WAS_SET_UP"
    (
        set_up() {
            :
        }
        set_up_test "$test_name"
        if ! "${!set_up_var}"; then
            return 1
        fi
        return 0
    )
}

test_was_run() {
    local test_name=test_1
    local was_run_var="${test_name}_WAS_RUN"
    (
        if [[ -n "${!was_run_var}" ]]; then
            return 1
        fi
        was_run "$test_name"
        if ! "${!was_run_var}"; then
            return 1
        fi
    )
}

test_tear_down_test() {
    local test_name=test_1
    local tear_down_var="${test_name}_WAS_TEAR_DOWN"
    (
        tear_down() {
            :
        }
        tear_down_test "$test_name"
        if ! "${!tear_down_var}"; then
            return 1
        fi
        return 0
    )
}

test_log_status() {
    local ok_message
    ok_message="$(log_status my_test 0)"
    local failed_message
    failed_message="$(log_status my_test 1)"
    if [[ "$ok_message" == "OK: my_test" && "$failed_message" == "FAILED: my_test" ]]; then
        return 0
    fi
    return 1
}

check_ran_tests() {
    local test_filename="$1"
    local test_list
    local test_name
    IFS=$'\n' read -r -d '' -a test_list <<<"$( find_testnames "$test_filename" )"
    for test_name in "${test_list[@]}"; do
        local test_was_run="${test_name}_WAS_RUN"
        if ! "${!test_was_run}"; then
            return 1
        fi
    done
    return 0
}

test_execute_suite() {
    (
        set_up() {
            :
        }
        tear_down() {
            :
        }
        execute_suite "$FILENAME" >/dev/null
        check_ran_tests "$FILENAME"
    )
}

test_execute_tests() {
    echo "#!/bin/bash
test_4() {
    touch ./test_4
}
test_5() {
    touch ./test_5
}
" >./test_45
    execute_tests "./test_45" "$SH_UNIT_FILENAME" >/dev/null
    rm ./test_45
    if [[ -f ./test_4 && -f ./test_5 ]]; then
        rm ./test_4
        rm ./test_5
    else
        rm ./test_4 2>/dev/null
        rm ./test_5 2>/dev/null
        return 1
    fi
}

test_find_testnames() {
    local testnames
    testnames="$( find_testnames "$FILENAME" )"
    local testnames_test="test_1
test_2
test_3"
    if [[ "$testnames" != "$testnames_test" ]]; then
        return 1
    fi
    return 0
}

test_main() {
    echo "#!/bin/bash
test_4() {
    touch test_4
}
test_5() {
    touch test_5
}
" >./test_45
    main "./test_45" >/dev/null || return 1
    rm ./test_45
    if [[ -f ./test_4 && -f ./test_5 ]]; then
        rm ./test_4
        rm ./test_5
    else
        rm ./test_4 2>/dev/null
        rm ./test_5 2>/dev/null
        return 1
    fi
}

test_script() {
    :
}

run test_tear_down_test
run test_set_up_test
run test_was_run
run test_run
run test_log_status
run test_execute_suite
run test_execute_tests
run test_find_testnames
run test_main