#!/bin/bash

source "bashUnit/shUnit"
source "bashUnit/test"

test_run() {
    local test_name=test_method
    local test_was_run="${test_name}_WAS_RUN"
    run "$test_name"
    if ! "${!test_was_run}"; then
        return 1
    fi
    return 0
}

test_set_up_test() {
    local test_name=test_method
    local test_set_up="${test_name}_WAS_SET_UP"
    set_up_test "$test_name"
    if ! "${!test_set_up}"; then
        return 1
    fi
    return 0
}

test_was_run() {
    local test_name=test_method
    local test_was_run="${test_name}_WAS_RUN"
    if "${!test_was_run}"; then
        return 1
    fi
    was_run "$test_name"
    if ! "${!test_was_run}"; then
        return 1
    fi
    return 0
}

test_tear_down_test() {
    local test_name=test_method
    local test_tear_down="${test_name}_TEAR_DOWN"
    tear_down_test "$test_name"
    if ! "${!test_tear_down}"; then
        return 1
    fi
    return 0
}

test_method() {
    method
    return 0
}

test_another_method() {
    another_method
    return 0
}

test_log_status() {
    local ok_message
    ok_message="$(log_status my_test 0)"
    local failed_message
    failed_message="$(log_status my_test 1)"
    if [[ "$ok_message" == "OK: my_test" && "$failed_message" == "FAILED: my_test" ]]; then
        return 0
    fi
    return 1
}

test_execute_suite() {
    local suite_filename="bashUnit/test_test"
    execute_suite "$suite_filename"
    local test_list
    local test_name
    IFS=$'\n' test_list=($(grep -Po "test_\w+(?=\(\))" "$suite_filename"))
    for test_name in "${test_list[@]}"; do
        local test_was_run="${test_name}_WAS_RUN"
        if ! "${!test_was_run}"; then
            return 1
        fi
    done
    return 0
}

test_main() {
    :
}

run test_tear_down_test
run test_another_method
run test_set_up_test
run test_was_run
run test_run
run test_method
run test_log_status
run test_execute_suite

